tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: janus.tests.datatypes.pub
  template_version: 1.0-SNAPSHOT
  template_author: Janus team

description: Public interface types for the complex data type demo.


imports:
  - tosca-normative-types: <normative-types.yml>


data_types:
  janus.tests.datatypes.ComplexType:
    derived_from: tosca.datatypes.Root
    properties:
      literal:
        type: integer
      literalDefault:
        type: string
        default: ComplexDataTypeDefault
      mymap:
        type: map
        entry_schema: 
          type: integer
  janus.tests.datatypes.SubComplexType:
    derived_from: janus.tests.datatypes.ComplexType
  janus.tests.datatypes.BaseType:
    derived_from: tosca.datatypes.Root
    properties:
      nestedType:
        type: janus.tests.datatypes.NestedType
  janus.tests.datatypes.NestedType:
    derived_from: tosca.datatypes.Root
    properties:
      listofstring:
        type: list
        entry_schema:
            type: string
      subcomplex:
        type: janus.tests.datatypes.SubComplexType
      listofcomplex:
        type: list
        entry_schema:
          type: janus.tests.datatypes.ComplexType 
      mapofcomplex:
        type: map
        entry_schema:
          type: janus.tests.datatypes.ComplexType       

node_types:
  janus.tests.nodes.AbstractValueAssignmentNode:
    abstract: true
    derived_from: tosca.nodes.Root
    properties:
      empty:
        type: string
        required: false
      list:
        type: list
        entry_schema:
          type: string
      map:
        type: map
        entry_schema:
          type: string
      mapdef:
        type: map
        entry_schema:
          type: string
        default: { def1: "map 1 default value", def2: "map 1 default value"}
      baseComplex:
        type: janus.tests.datatypes.BaseType
    attributes:
      concat_attr: { concat: [get_property: [SELF, port], concat: ["something", concat: [concat: ["hello", get_operation_output: [SELF, Standard, create, CREATE_OUTPUT]], "!"]] ] }
    capabilities:
      endpoint:
        type: janus.tests.capabilities.ValueAssignmentEndpoint
    requirements:
      - host:
          capability: tosca.capabilities.Container
          relationship: tosca.relationships.HostedOn
      - server:
          capability: janus.tests.capabilities.ValueAssignmentEndpoint
          # relationship: janus.tests.relationships.ValueAssignmentConnectsTo
          occurrences: [0, 1]

  janus.tests.nodes.ValueAssignmentNode:
    derived_from: janus.tests.nodes.AbstractValueAssignmentNode
    requirements:
      - server:
          capability: janus.tests.capabilities.ValueAssignmentEndpoint
          relationship: janus.tests.relationships.ValueAssignmentConnectsTo
          occurrences: [0, 1]
    interfaces:
      custom:
        publish:
          inputs:
            input_concat: { get_attribute: [ SELF, concat_attr ] }
            input_complex:
              type: janus.tests.datatypes.BaseType
              required: true
              default:
                nestedType:
                  listofstring: ["typeDefL1", "typeDefL2"]
                  subcomplex:
                    literal: 4
                  listofcomplex:
                    - literal: 42
                      mymap: {"nested": 1}
                    - literal: 43
                      mymap: {"nested": 2}
                  mapofcomplex:
                    m1: 
                      literal: 52
                      mymap: {"nested": 3}
          implementation: scripts/show_inputs.sh
      Standard:
        create: scripts/create.sh
        configure: 
          inputs:
            input_litteral: "testLiteral"
            input_list: ["l1", "l2"]
            input_list_ex:
              - "le1"
              - "le2"
            input_map: {"key1": "value1", "key2": "value2"}
            input_map_ex:
              keyex1: value1
              "keyex2": "value2"
            input_empty: { get_property: [SELF, empty] }
            input_propMapdef_all: { get_property: [SELF, map] }
            # Alien notation
            input_propMapdef_def1: { get_property: [SELF, "mapdef.def1"] }
            # TOSCA standard
            input_propMapdef_def2: { get_property: [SELF, mapdef, def1] }
            input_propList_all: { get_property: [SELF, list] }
            input_propList_0_alien: { get_property: [SELF, "list[0]"] }
            input_propList_0_tosca: { get_property: [SELF, list, 0] }
          implementation: scripts/show_inputs.sh
        start:
          inputs:
            input_litteral: "testLiteral"
            input_list: ["l1", "l2"]
            input_list_ex:
              - "le1"
              - "le2"
            input_map: {"key1": "value1", "key2": "value2"}
            input_map_ex:
              keyex1: value1
              "keyex2": "value2"
            input_empty: { get_property: [SELF, empty] }
            input_propMapdef_all: { get_property: [SELF, map] }
            # Alien notation
            input_propMapdef_def1: { get_property: [SELF, "mapdef.def1"] }
            # TOSCA standard
            input_propMapdef_def2: { get_property: [SELF, mapdef, def1] }
            input_propList_all: { get_property: [SELF, list] }
            input_propList_0_alien: { get_property: [SELF, "list[0]"] }
            input_propList_0_tosca: { get_property: [SELF, list, 0] }
          implementation: scripts/show_inputs.yaml


relationship_types:
  janus.tests.relationships.ValueAssignmentConnectsTo:
    derived_from: tosca.relationships.ConnectsTo
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            input_litteral: "testLiteral"
            input_list: ["l1", "l2"]
            input_list_ex:
              - "le1"
              - "le2"
            input_map: {"key1": "value1", "key2": "value2"}
            input_map_ex:
              keyex1: value1
              "keyex2": "value2"
            input_empty: { get_property: [SOURCE, empty] }
            input_propMapdef_all: { get_property: [SOURCE, map] }
            # Alien notation
            input_propMapdef_def1: { get_property: [SOURCE, "mapdef.def1"] }
            # TOSCA standard
            input_propMapdef_def2: { get_property: [SOURCE, mapdef, def1] }
            input_propList_all: { get_property: [SOURCE, list] }
            input_propList_0_alien: { get_property: [SOURCE, "list[0]"] }
            input_propList_0_tosca: { get_property: [SOURCE, list, 0] }
          implementation: scripts/show_inputs.sh
        post_configure_source:
          inputs:
            input_litteral: "testLiteral"
            input_list: ["l1", "l2"]
            input_list_ex:
              - "le1"
              - "le2"
            input_map: {"key1": "value1", "key2": "value2"}
            input_map_ex:
              keyex1: value1
              "keyex2": "value2"
            input_empty: { get_property: [SOURCE, empty] }
            input_propMapdef_all: { get_property: [SOURCE, map] }
            # Alien notation
            input_propMapdef_def1: { get_property: [SOURCE, "mapdef.def1"] }
            # TOSCA standard
            input_propMapdef_def2: { get_property: [SOURCE, mapdef, def1] }
            input_propList_all: { get_property: [SOURCE, list] }
            input_propList_0_alien: { get_property: [SOURCE, "list[0]"] }
            input_propList_0_tosca: { get_property: [SOURCE, list, 0] }
          implementation: scripts/show_inputs.yaml
        pre_configure_target:
          inputs:
            input_litteral: "testLiteral"
            input_list: ["l1", "l2"]
            input_list_ex:
              - "le1"
              - "le2"
            input_map: {"key1": "value1", "key2": "value2"}
            input_map_ex:
              keyex1: value1
              "keyex2": "value2"
            input_empty: { get_property: [TARGET, empty] }
            input_propMapdef_all: { get_property: [TARGET, map] }
            # Alien notation
            input_propMapdef_def1: { get_property: [TARGET, "mapdef.def1"] }
            # TOSCA standard
            input_propMapdef_def2: { get_property: [TARGET, mapdef, def1] }
            input_propList_all: { get_property: [TARGET, list] }
            input_propList_0_alien: { get_property: [TARGET, "list[0]"] }
            input_propList_0_tosca: { get_property: [TARGET, list, 0] }
          implementation: scripts/show_inputs.sh
        post_configure_target:
          inputs:
            input_litteral: "testLiteral"
            input_list: ["l1", "l2"]
            input_list_ex:
              - "le1"
              - "le2"
            input_map: {"key1": "value1", "key2": "value2"}
            input_map_ex:
              keyex1: value1
              "keyex2": "value2"
            input_empty: { get_property: [TARGET, empty] }
            input_propMapdef_all: { get_property: [TARGET, map] }
            # Alien notation
            input_propMapdef_def1: { get_property: [TARGET, "mapdef.def1"] }
            # TOSCA standard
            input_propMapdef_def2: { get_property: [TARGET, mapdef, def1] }
            input_propList_all: { get_property: [TARGET, list] }
            input_propList_0_alien: { get_property: [TARGET, "list[0]"] }
            input_propList_0_tosca: { get_property: [TARGET, list, 0] }
          implementation: scripts/show_inputs.yaml

capability_types:
  janus.tests.capabilities.ValueAssignmentEndpoint:
    derived_from: tosca.capabilities.Endpoint


topology_template:
  node_templates:
    ValueAssignmentNode1:
      type: janus.tests.nodes.ValueAssignmentNode
      properties:
        list:
          - mylist0
          - mylist1
        map:
          m1: 1
        mapdef:
          def1: "map 1 default value"
          def2: "map 2 default value"
        baseComplex:
          nestedType:
            listofstring:
              - ls0
              - ls2
            subcomplex:
              literal: 1
              literalDefault: ComplexDataTypeDefault
              mymap:
                sc0: 0
                sc1: 1
            listofcomplex:
              - literal: 2
                mymap:
                  loc0: 0
                  loc1: 1
                literalDefault: locLitDef
              - literal: 3
                literalDefault: loc1LitDef
                mymap:
                  loc10: 10
                  loc11: 11
            mapofcomplex:
              moc0:
                literal: 5
                literalDefault: moc0LitDef
                mymap:
                  moc01: 01
                  moc02: 02
              moc1:
                literal: 6
                literalDefault: moc1LitDef
                mymap:
                  moc10: 10
                  moc11: 11
                  moc12: 12
      requirements:
        - host:
            node: Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
    ValueAssignmentNode2:
          type: janus.tests.nodes.ValueAssignmentNode
          properties:
            list:
              - mylist0
              - mylist1
            map:
              m1: 1
            mapdef:
              def1: "map 1 default value"
              def2: "map 2 default value"
            baseComplex:
              nestedType:
                listofstring:
                  - ls0
                  - ls2
                subcomplex:
                  literal: 1
                  literalDefault: ComplexDataTypeDefault
                  mymap:
                    sc0: 0
                    sc1: 1
                listofcomplex:
                  - literal: 2
                    mymap:
                      loc0: 0
                      loc1: 1
                    literalDefault: locLitDef
                  - literal: 3
                    literalDefault: loc1LitDef
                    mymap:
                      loc10: 10
                      loc11: 11
                mapofcomplex:
                  moc0:
                    literal: 5
                    literalDefault: moc0LitDef
                    mymap:
                      moc01: 01
                      moc02: 02
                  moc1:
                    literal: 6
                    literalDefault: moc1LitDef
                    mymap:
                      moc10: 10
                      moc11: 11
                      moc12: 12
          requirements:
            - host:
                node: Compute
                capability: tosca.capabilities.Container
                relationship: tosca.relationships.HostedOn
            - server:
                capability: janus.tests.capabilities.ValueAssignmentEndpoint
                node: ValueAssignmentNode1
                relationship: janus.tests.relationships.ValueAssignmentConnectsTo
    Compute:
      type: tosca.nodes.Compute
      capabilities:
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
