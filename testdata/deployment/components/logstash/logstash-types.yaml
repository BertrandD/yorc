#
# Starlings
# Copyright (C) 2015 Bull S.A.S. - All rights reserved
#

tosca_definitions_version: janus_tosca_simple_yaml_1_0
description: logstash, a tool for managing your logs.
template_name: logstash-types
template_version: 2.1
template_author: starlings

node_types:
  starlings.nodes.GeoNames:
    derived_from: tosca.nodes.Root
    description: A GeoNames connector
    tags:
      icon: /images/geonames.gif
    properties:
      repository:
        type: string
        description: >
          The repository to download the geonames archives.
          You may want to specify a local directory where you have previously copied the archive files.
        required: false
        default: http://download.geonames.org/export/dump/
        constraints:
          - pattern: ^(http|https|ftp)://.+/.*$
      filename:
        type: string
        default: allCountries
        description: >
          Name of the file containing GeoNames data
          The default is allCountries to get a complete information (very heavy)
          You can choose a country code in capitals (US, FR, ...)
          Or another file like cities15000 or cities5000
          A .zip suffix will be added to this name.
        required: true
      indexname:
        type: string
        default: geonames
        description: >
          Name of index to store GeoNames data
        required: true
    capabilities:
      geonames_resource: starlings.capabilities.GeonamesEndpoint
    requirements:
      - logstash: starlings.capabilities.LogstashConnectorHosting
        type: starlings.relationships.GeonamesHostedOnLogstash
        lower_bound: 1
        upper_bound: 1
    interfaces:
      Standard:
          create:
            inputs:
              REPOSITORY: { get_property: [SELF, repository] }
              FNAME: { get_property: [SELF, filename] }
            implementation: geonames/create.sh
          configure:
            implementation: geonames/configure.sh
          start:
            implementation: geonames/start.sh
          stop:
            implementation: geonames/stop.sh
      custom:
          update:
            inputs:
              REPOSITORY: { get_property: [SELF, repository] }
              FNAME:
                type: string
                description: file name used for update (without .zip suffix)
                required: true
            implementation: geonames/update.sh
    artifacts:
      - geoscripts: geonames
        type: tosca.artifacts.File
      - scripts: scripts
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File

  starlings.nodes.Logstash:
    derived_from: tosca.nodes.Root
    description: Installation of Logstash from Elastic Stack
    tags:
      icon: /images/logstash-icon.png
    properties:
      component_version:
        type: version
        description: Version of the installed Logstash component
        default: 2.3.1
        constraints:
          - equal: 2.3.1
      repository:
         type: string
         description: >
           This property give the opportunity to specify an alternative download repository for this component artifact.
           It is your responsibility to provide an accessible download url and to store required artifacts on it.
           You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among
           several components using the inputs feature.
         required: false
         constraints:
           - pattern: ^(http|https|ftp)://.+/.*$
      auto_reload:
        type: boolean
        description: Monitor configuration changes and reload whenever it is changed
        default: false
      reload_interval:
        type: integer
        description: How frequently to poll the configuration location for changes, in seconds
        default: 60
      stdout:
        type: boolean
        description: Define the stdout logstash output, to allow to see the events pipeline.
        default: false
      heap_size:
        type: string
        default: "500M"
        description: >
          This property allows to set the heap memory size that is allocated to Logstash java process,
          It allocates the same value to both initial and maximum values (ie -Xms and -Xmx java options).
        constraints:
          - pattern: "[1-9][0-9]*[kKmMgG]"
      log_level:
        type: string
        description: >
          Define Logstash log level. By default very few logs are generated by Logstash.
          All logs are redirected to a file except if you set 'stdout' to 'true'.
        default: "quiet"
        constraints:
          - valid_values: [ "quiet", "verbose", "debug" ]
    capabilities:
      logstash_resource: starlings.capabilities.LogstashEndpoint
      connector_host:
        type: starlings.capabilities.LogstashConnectorHosting
        valid_node_types: [ starlings.nodes.TwitterConnector ]
        upper_bound: unbounded
    requirements:
      - search_endpoint: starlings.capabilities.SearchEndpoint
        type: starlings.relationships.ConnectsLogstashToElasticsearch
        lower_bound: 0
        upper_bound: 1
      - kafka_output: starlings.capabilities.KafkaTopic
        type: starlings.relationships.ConnectsLogstashToKafka
        lower_bound: 0
        upper_bound: 1
      - kafka_input: starlings.capabilities.KafkaTopic
        type: starlings.relationships.ConnectsKafkaToLogstash
        lower_bound: 0
        upper_bound: 1
      - java: starlings.capabilities.JavaHosting
        type: starlings.relationships.HostedOnJavaRuntime
        lower_bound: 1
        upper_bound: 1
      - consul: starlings.capabilities.ConsulAgent
        type: starlings.relationships.ConnectsToConsulAgent
        lower_bound: 0
        upper_bound: 1
    interfaces:
      Standard:
          create:
            inputs:
              LS_VERSION: { get_property: [SELF, component_version] }
              REPOSITORY: { get_property: [SELF, repository] }
            implementation: scripts/logstash_install.sh
          configure:
            inputs:
              STDOUT: { get_property: [SELF, stdout] }
            implementation: scripts/logstash_configure.sh
          start:
            inputs:
              AUTO_RELOAD: { get_property: [SELF, auto_reload] }
              RELOAD_INTERVAL: { get_property: [SELF, reload_interval] }
              STDOUT: { get_property: [SELF, stdout] }
              LOGSTASH_LOG_LEVEL: { get_property: [SELF, log_level] }
              LOGSTASH_HEAP_SIZE: { get_property: [SELF, heap_size] }
            implementation: scripts/logstash_start.sh
          stop: scripts/logstash_stop.sh
      custom:
          change_input:
            inputs:
              url:
                type: string
                description: input param for change_input
                required: true
              AUTO_RELOAD: { get_property: [SELF, auto_reload] }
            implementation: scripts/logstash_changeInput.sh
          change_output:
            inputs:
              url:
                type: string
                description: input param for change_output
                required: true
              AUTO_RELOAD: { get_property: [SELF, auto_reload] }
            implementation: scripts/logstash_changeOutput.sh
          change_filter:
            inputs:
              url:
                type: string
                description: input param for change_filter
                required: true
              AUTO_RELOAD: { get_property: [SELF, auto_reload] }
            implementation: scripts/logstash_changeFilter.sh
    artifacts:
      - scripts: scripts
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File
      - conf: conf
        type: tosca.artifacts.File
      - certificates: certificates
        type: tosca.artifacts.File
      - private_key: certificates/default-logstash-forwarder.key
        type: tosca.artifacts.File
      - certificate: certificates/default-logstash-forwarder.crt
        type: tosca.artifacts.File
      - inputs_conf: conf/1-1_logstash_inputs.conf
        type: tosca.artifacts.File
      - filters_conf: conf/2-1_logstash_filters.conf
        type: tosca.artifacts.File
      - outputs_conf: conf/3-1_logstash_outputs.conf
        type: tosca.artifacts.File
      - extra_host: artifactsFiles/hosts_to_add.txt
        type: tosca.artifacts.File
      - consul_utils: consul_utils
        type: tosca.artifacts.File

  starlings.nodes.TwitterConnector:
    derived_from: tosca.nodes.Root
    description: A twitter connector
    tags:
      icon: /images/twitter-icon.png
    requirements:
      - connector_host: starlings.capabilities.LogstashConnectorHosting
        relationship_type: starlings.relationships.TwitterConnectorHostedOnLogstash
        lower_bound: 1
        upper_bound: 1
    properties:
      consumer_key:
        type: string
        description: Your Twitter App's consumer key.
        required: true
      consumer_secret:
        type: string
        description: Your Twitter App's consumer secret.
        required: true
      oauth_token:
        type: string
        description: Your Twitter oauth token.
        required: true
      oauth_token_secret:
        type: string
        description: Your Twitter oauth token secret.
        required: true
      use_proxy:
        type: boolean
        default: false
        description: Use a proxy to handle the connections.
        required: true
      proxy_address:
        type: string
        description: >
          Address of the proxy to use.
          If use_proxy property is true, and no value is set for this property,
          then default environment proxy settings on the compute will be used.
        required: false
      proxy_port:
        type: integer
        description: >
          Port of the proxy to use.
          If use_proxy property is true, and no value is set for this property,
          then default environment proxy settings on the compute will be used.
        required: false
        constraints:
          - in_range : [ 1, 65535 ]
      keywords:
        type: string
        description: >
          An array of keywords to track in the Twitter stream
          Ex: ["foo", "bar"]
          At least one property "keywords" or "follows" must be specified if use_samples property is not set.
        required: false
        constraints:
          - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
      follows:
        type: string
        description: >
          An array of user IDs, indicating the users to return statuses for in the Twitter stream.
          Ex: ["ID1", "ID2"].
          At least one property "keywords" or "follows" must be specified if use_samples property is not set.
        constraints:
          - pattern: \[\"@?(\w){1,15}\"(,\s*\"@?(\w){1,15}\")*\]
        required: false
      languages:
        type: string
        description: >
          An array of BCP 47 language identifiers corresponding to any of the languages listed on Twitter's advanced search
          page will only return tweets that have been detected as being written in the specified languages.
          Ex: [ "en", "fr" ]
        required: false
        constraints:
          - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
      use_samples:
        type: boolean
        default: false
        description: >
          Returns a small random sample of all public statuses.
          If set to true, the keywords, follows and languages properties will be ignored.
        required: false
      full_tweet:
        type: boolean
        default: false
        description: >
          Record full tweet object as given to us by the Twitter Streaming API.
        required: false
      tags:
        type: string
        description: >
          An array of tags to add to your event. This can help with processing later.
          Ex: ["tagName"]
        required: false
        constraints:
          - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
      ignore_retweets:
        type: boolean
        default: false
        description: >
          Lets you ignore the retweets coming out of the Twitter API.
        required: false
    interfaces:
      custom:
        change_authentication:
          inputs:
            consumer_key:
              type: string
              description: Your Twitter App's consumer key.
              required: true
            consumer_secret:
              type: string
              description: Your Twitter App's consumer secret.
              required: true
            oauth_token:
              type: string
              description: Your Twitter oauth token.
              required: true
            oauth_token_secret:
              type: string
              description: Your Twitter oauth token secret.
              required: true
          implementation: twitterScripts/twitter_changeAuthentication.sh
        change_proxy:
          inputs:
            use_proxy:
              type: boolean
              default: false
              description: Use a proxy to handle the connections.
              required: true
            proxy_address:
              type: string
              description: >
                Address of the proxy to use.
                If use_proxy property is true, and no value is set for this property,
                then default environment proxy settings on the compute will be used.
              required: false
            proxy_port:
              type: integer
              description: >
                Port of the proxy to use.
                If use_proxy property is true, and no value is set for this property,
                then default environment proxy settings on the compute will be used.
              required: false
              constraints:
                - in_range : [ 1, 65535 ]
          implementation: twitterScripts/twitter_changeProxy.sh
        change_follows:
          inputs:
            follows:
              type: string
              description: >
                An array of user IDs, indicating the users to return statuses for in the Twitter stream.
                Ex: ["@ID1", "@ID2"].
                At least one property "keywords" or "follows" must be specified if use_samples property is not set.
              required: false
              constraints:
                - pattern: \[\"@?(\w){1,15}\"(,\s*\"@?(\w){1,15}\")*\]
          implementation: twitterScripts/twitter_changeFollows.sh
        change_keywords:
          inputs:
            keywords:
              type: string
              description: >
                An array of keywords to track in the Twitter stream
                Ex: ["foo", "bar"]
                At least one property "keywords" or "follows" must be specified if use_samples property is not set.
              required: false
              constraints:
                - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
          implementation: twitterScripts/twitter_changeKeywords.sh
        change_languages:
          inputs:
            languages:
              type: string
              description: >
                An array of BCP 47 language identifiers corresponding to any of the languages listed on Twitter's advanced search
                page will only return tweets that have been detected as being written in the specified languages.
                Ex: [ "en", "fr" ]
              required: false
              constraints:
                - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
          implementation: twitterScripts/twitter_changeLanguages.sh
        change_tags:
          inputs:
            tags:
              type: string
              description: >
                An array of tags to add to your event. This can help with processing later.
                Ex: ["tagName"]
              required: false
              constraints:
                - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
          implementation: twitterScripts/twitter_changeTags.sh
        change_use_samples:
          inputs:
            use_samples:
              type: boolean
              default: false
              description: >
                Returns a small random sample of all public statuses.
                If set to true, the keywords, follows and languages properties will be ignored.
              required: false
          implementation: twitterScripts/twitter_changeUseSamples.sh
        change_full_tweet:
          inputs:
            full_tweet:
              type: boolean
              default: false
              description: >
                Record full tweet object as given to us by the Twitter Streaming API.
              required: false
          implementation: twitterScripts/twitter_changeFullTweet.sh
        change_ignore_retweets:
          inputs:
            ignore_retweets:
              type: boolean
              default: false
              description: >
                Lets you ignore the retweets coming out of the Twitter API.
              required: false
          implementation: twitterScripts/twitter_changeIgnoreRetweets.sh
        add_tags:
          inputs:
            tags:
              type: string
              description: >
                A list of tag(s) to add to existing tags list
                Ex: ["tag1", "tag2"]
              required: true
              constraints:
               - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
          implementation: twitterScripts/twitter_addTags.sh
        remove_tags:
          inputs:
            tags:
              type: string
              description: >
                A list of tag(s) to remove to existing tags list
                Ex: ["tag1", "tag2"]
              required: true
              constraints:
               - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
          implementation: twitterScripts/twitter_removeTags.sh
        add_keywords:
          inputs:
            keywords:
              type: string
              description: >
                A list of keyword(s) to add to existing keywords list
                Ex: ["keyword1", "keyword2"]
              required: true
              constraints:
               - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
          implementation: twitterScripts/twitter_addKeywords.sh
        remove_keywords:
          inputs:
            keywords:
              type: string
              description: >
                A list of keyword(s) to remove to existing keywords list
                Ex: ["keyword1", "keyword2"]
              required: true
              constraints:
               - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
          implementation: twitterScripts/twitter_removeKeywords.sh
        add_languages:
          inputs:
            languages:
              type: string
              description: >
                A list of language(s) to add to existing languages list
                Ex: ["cz", "de"]
              required: true
              constraints:
               - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
          implementation: twitterScripts/twitter_addLanguages.sh
        remove_languages:
          inputs:
            languages:
              type: string
              description: >
                A list of language(s) to remove to existing languages list
                Ex: ["cz", "de"]
              required: true
              constraints:
               - pattern: \[\"(\w)+\"(,\s*\"(\w)+\")*\]
          implementation: twitterScripts/twitter_removeLanguages.sh
        add_follows:
          inputs:
            follows:
              type: string
              description: >
                A list of follow(s) to add to existing follows list
                Ex: ["@ID1", "@ID2"]
              required: true
              constraints:
                - pattern: \[\"@?(\w){1,15}\"(,\s*\"@?(\w){1,15}\")*\]
          implementation: twitterScripts/twitter_addFollows.sh
        remove_follows:
          inputs:
            follows:
              type: string
              description: >
                A list of follow(s) to remove to existing Follows list
                Ex: ["@ID1", "@ID2"]
              required: true
              constraints:
                - pattern: \[\"@?(\w){1,15}\"(,\s*\"@?(\w){1,15}\")*\]
          implementation: twitterScripts/twitter_removeFollows.sh
    artifacts:
      - twitterScripts: twitterScripts
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File
      - ls_scripts: scripts
        type: tosca.artifacts.File

capability_types:
  starlings.capabilities.LogstashEndpoint:
    derived_from: tosca.capabilities.Endpoint
  starlings.capabilities.LogstashConnectorHosting:
    derived_from: tosca.capabilities.Container
  starlings.capabilities.GeonamesEndpoint:
    derived_from: tosca.capabilities.Endpoint

relationship_types:
  starlings.relationships.ConnectsLogstashToElasticsearch:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      Connects Logstash to ElasticSearch
    valid_sources: [ starlings.capabilities.LogstashEndpoint ]
    valid_targets: [ starlings.capabilities.SearchEndpoint ]
    interfaces:
      Configure:
          pre_configure_source:
            implementation: scripts/logstash-to-elasticsearch.sh
            inputs:
              cluster_name: { get_property: [ TARGET, cluster_name ] }
    artifacts:
      - scripts: scripts
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File

  starlings.relationships.ConnectsLogstashToKafka:
    derived_from: starlings.relationships.PublishToKafkaTopicOn
    description: >
      Connects Logstash to a Kafka topic
    interfaces:
      Configure:
        pre_configure_source:
          implementation: kafkaRelationshipScripts/configure-kafka-output.sh
          inputs:
            TOPIC_NAME: { get_property: [TARGET, topic_name] }
            REQUIRED_ACKS: { get_property: [SELF, request_required_acks] }
            MESSAGE_MAX_RETRIES: { get_property: [SELF, message_send_max_retries] }
            RETRY_BACKOFF_MS: { get_property: [SELF, retry_backoff_ms] }
            REQUEST_TIMEOUT_MS: { get_property: [SELF, request_timeout_ms] }
    artifacts:
      - scripts: kafkaRelationshipScripts
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File
      - ls_scripts: scripts
        type: tosca.artifacts.File

  starlings.relationships.ConnectsKafkaToLogstash:
    derived_from: starlings.relationships.ConnectsToKafkaTopicOn
    description: >
      Connects Kafka to Logstash
    valid_targets: [ starlings.capabilities.KafkaTopic ]
    interfaces:
      Configure:
          pre_configure_source:
            implementation: kafkaRelationshipScripts/configure-kafka-input.sh
            inputs:
              TOPIC_NAME: { get_property: [TARGET, topic_name] }
    artifacts:
      - scripts: kafkaRelationshipScripts
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File
      - ls_scripts: scripts
        type: tosca.artifacts.File

  starlings.relationships.TwitterConnectorHostedOnLogstash:
    derived_from: tosca.relationships.HostedOn
    description: >
      Configure the Logstash Twitter input
    valid_targets: [ starlings.capabilities.LogstashConnectorHosting ]
    interfaces:
      Configure:
        pre_configure_source:
          implementation: twitterRelationshipScripts/configure-twitter-input.sh
          inputs:
            CONSUMER_KEY: { get_property: [SOURCE, consumer_key] }
            CONSUMER_SECRET: { get_property: [SOURCE, consumer_secret] }
            OAUTH_TOKEN: { get_property: [SOURCE, oauth_token] }
            OAUTH_TOKEN_SECRET: { get_property: [SOURCE, oauth_token_secret] }
            USE_PROXY: { get_property: [SOURCE, use_proxy] }
            PROXY_ADDRESS: { get_property: [SOURCE, proxy_address] }
            PROXY_PORT: { get_property: [SOURCE, proxy_port] }
            KEYWORDS: { get_property: [SOURCE, keywords] }
            FOLLOWS: { get_property: [SOURCE, follows] }
            LANGUAGES: { get_property: [SOURCE, languages] }
            USE_SAMPLES: { get_property: [SOURCE, use_samples] }
            FULL_TWEET: { get_property: [SOURCE, full_tweet] }
            TAGS: { get_property: [SOURCE, tags] }
            IGNORE_RETWEETS: { get_property: [SOURCE, ignore_retweets] }
    artifacts:
      - scripts: twitterRelationshipScripts
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File
      - ls_scripts: scripts
        type: tosca.artifacts.File

  starlings.relationships.GeonamesHostedOnLogstash:
    derived_from: tosca.relationships.HostedOn
    description: Connects Geonames to Logstash
    valid_targets: [ starlings.capabilities.LogstashConnectorHosting ]
    interfaces:
      Configure:
          post_configure_source:
            implementation: geonames/relationship/geonames_to_logstash/post_configure_source.sh
            inputs:
              REPOSITORY: { get_property: [SOURCE, repository] }
              INDEX: { get_property: [SOURCE, indexname] }
              FNAME: { get_property: [SOURCE, filename] }
              AUTO_RELOAD: { get_property: [TARGET, auto_reload] }
    artifacts:
      - geoscripts: geonames
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File
      - scripts: scripts
        type: tosca.artifacts.File


